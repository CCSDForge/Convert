#!/bin/bash
# Author: Patrice Ferlet <metal3d _at_ copix.org>
# Licence: GPL v2
#
# Modify by B Marmol <Bruno.Marmol _at_ inria.fr> for it's own use
usage=<< EOF
Usage: 
    $0 target_dir [commands]
where target_dir is a directory where to create or configure chroot

[commands] are commands to install in chroot. If commands are not given, this basics commands will  be installed:
   - bash
   - ls
   - cat
   - more

If target_dir exists, $O will ask if you want to delete directory. If you say "no", then $0 will  try to add commands in existing chroot.

Example:
    #create basic chroot
    $0 /var/mychroot
    
    #create chroot with bash and perl
    $0 /var/mychroot2 bash perl
    #add ls cat and python commands
    $0 /var/mychroot2 ls cat python
EOF

# Package de fonts pour xelatex internationnalise:
# fonts-baekmuk, fonts-ipaexfont-mincho,  fonts-ipafont,  fonts-aksharyogini2,
# fonts-deva, fonts-deva-extra, fonts-gargi, fonts-sahadeva, fonts-cwtex-fs,
# fonts-arphic-bkai00mp, fonts-arphic-gkai00mp, fonts-arphic-ukai, fonts-wqy-zenhei,
# fonts-arphic-gbsn00lp, fonts-nakula, fonts-noto-hinted, fonts-noto-cjk, fonts-noto-unhinted
# fonts-font-awesome

nocopydir=0
BINS="bash env ls cat more gs ps2pdf14 ps2pdfwr dirname basename grep ldconfig ldconfig.real dash sh"

case `hostname` in
    ccsdlatex*) TREES="/usr/share/ghostscript /etc/fonts /usr/share/fonts /usr/share/fonts-font-awesome";;
    *) TREES="/usr/local/texlive /usr/share/ghostscript";;
esac

# ----------------------------------------------------------------------
# Argument control
while getopts "cd:t:h" opt; do
    case $opt in
    	 d) DIRS="$DIRS $OPTARG";;
	 c) nocopydir=1;;
	 t) TARGET="$OPTARG";;
	 h) echo $usage; exit 0;;
    esac
done

for arg ; do
    ((OPTIND-=1))
    [[ $OPTIND -ge 1 ]] && continue   # on passe les arguments deja parses
    BINS="$BINS $arg"
done

if [[ "$TARGET" == "" ]];then 
    echo "target directory needed"
    exit 1
fi

# ----------------------------------------------------------------------
#on vérifie que le chroot n'existe pas
if [[ -d $TARGET  ]]; then
    echo "$TARGET existe, voulez vous le vider avant de recréer le chroot (o/N)?"
    read del
    del=`echo $del | tr "[a-z]" "[A-Z]"`

    if [[ "$del" == "Y" || $del == "YES" || $del == "O" || $del == "OUI" ]]; then
        echo "Suppression de $TARGET"
        rm -rf $TARGET
    fi
fi

echo "Création du chroot en cours... merci de patienter"

# ----------------------------------------------------------------------
# crée le répertoire et récupère le chemin absolu
mkdir -p $TARGET > /dev/null 2>&1
pushd $TARGET > /dev/null 2>&1
TARGET=`pwd`
popd > /dev/null 2>&1

# ----------------------------------------------------------------------
# pour chaque commande à copier
for basecommand in $BINS
do
    #recherche relative des binaire qui correspondent
    all=`which $basecommand`
    for command in $all
    do
        echo "Treat command: $command"
        #crée la cible et copie le binaire dans le chroot
        mkdir -p $TARGET`dirname $command` > /dev/null 2>&1
        cp -R -L "$command" $TARGET`dirname $command`

        #trouve les dépendances des bibliothèques et les copie dans le choot
        for f in `ldd $command 2>/dev/null | cut -f2 -d ">" | cut -f1 -d "(" `
        do
	    # echo "Copy $f"
            if [[ -f $f || -h $f ]];then
               mkdir -p $TARGET`dirname $f` > /dev/null 2>&1
               cp -R -L "$f" $TARGET`dirname $f`
            fi
        done
    done
done

# ----------------------------------------------------------------------
# pour chaque arborescence a copier
[ $nocopydir -eq 0 ] && { 
    echo "Copy needed filesystem path"
    for dir in $TREES; do
	dirname=`dirname $dir`
	rsync -ar  $dir $TARGET$dirname
    done
}

# ----------------------------------------------------------------------
# Create special nodes and absolutely necessary things
rmdir $TARGET/home 2> /dev/null ;  mkdir $TARGET/home 2>/dev/null
rmdir $TARGET/etc  2> /dev/null ;  mkdir $TARGET/etc 2>/dev/null
cp /etc/ld.so.conf $TARGET/etc/
mkdir $TARGET/etc/ld.so.conf.d 2>/dev/null
cp /etc/ld.so.conf.d/freetype.conf $TARGET/etc/ld.so.conf.d/

# On crée le noeud /dev/null 
[ -d  $TARGET/dev ]         || mkdir $TARGET/dev
[ -e $TARGET/dev/null ]     || mknod $TARGET/dev/null c 1 3
# et les périphériques de randomisation
[ -e $TARGET/dev/random  ]  || mknod -m 0444 $TARGET/dev/random c 1 8
[ -e $TARGET/dev/urandom  ] || mknod -m 0444 $TARGET/dev/urandom c 1 9

mkdir -p $TARGET/tmp/ccsdtex > /dev/null 2>&1
mkdir $TARGET/home/nobody 2>/dev/null
chown nobody $TARGET/tmp/ccsdtex $TARGET/home/nobody

chroot $TARGET ldconfig

#fini
echo "chroot créé, vous pouvez maintenant essayer:"
echo "chroot $TARGET"

exit 0
