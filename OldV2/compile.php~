function compile( $rootrep='' ) {

	while ( substr($rootrep, -1) == '/' ) {
		$rootrep = substr($rootrep, 0, -1);
	}
	// Le répertoire de base est connu?
	$directory = $rootrep.'/TEX';
	if ( strlen($directory) && is_dir($directory) ) {
		clean_dir($directory);
		foreach ( array('LOG', 'PDF', 'PS') as $dir ) {
			rm_dir($rootrep.'/'.$dir);
			@mkdir($rootrep.'/'.$dir);
		}
		rm_dir($rootrep.'/arXiv');
		if ( dir_size($directory) ) {
			// copie des fichiers dans un répertoire tempo privé
			$temprep = BASETEMPREP.'/'.uniqid();
			if ( !mkdir($temprep, 0777, true) ) {
				return new SoapFault('Server', "can't create directory  '".$temprep."'!");
			}
			cp_dir($directory, $temprep);
			// on se place dans le répertoire de travail tempo privé
			chdir($temprep);
			// recherche des fichiers à compiler
			$tex_files = mainTexFile();
			if ( count($tex_files) == 0 ) {
				return new SoapFault('Server', "no TeX, LaTeX or PdfLaTeX file found !");
			}
			// latex ou pdflatex ?
			$bin = checkTexBin();
			foreach ( $tex_files as $tex_file ) {
				$main_tex_file = mb_substr($tex_file, 0, -4);
				// compilation
				unlinkTexTmp($main_tex_file);
				if ( runTex($bin, $main_tex_file) ) {
					runTex($bin, $main_tex_file);
					if ( ( $if = check_for_bad_inputfile($main_tex_file) ) != '' ) {
						if ( is_file($main_tex_file.'.log') ) {
							copy($main_tex_file.'.log', $rootrep.'/LOG/'.$main_tex_file.'.log');
						}
						return new SoapFault('Server', $if." not found !");
					}
					if ( !(is_file($main_tex_file.'.dvi') || is_file($main_tex_file.'.pdf')) ) {
						if ( is_file($main_tex_file.'.log') ) {
							copy($main_tex_file.'.log', $rootrep.'/LOG/'.$main_tex_file.'.log');
						}
						return new SoapFault('Server', "Latex produced no output !");
					}
					// Check LaTeX Error
					if ( ( $error = check_for_compilation_error($main_tex_file) ) != '' ) {
						if ( is_file($main_tex_file.'.log') ) {
							copy($main_tex_file.'.log', $rootrep.'/LOG/'.$main_tex_file.'.log');
						}
						return new SoapFault('Server', "Latex produced an error: \n".$error);
					}
					// MakeIndex ?
					if ( is_file($main_tex_file.'.idx') && is_executable(substr($GLOBALS['makeindex'], 0, strpos($GLOBALS['makeindex'], ' '))) ) {
						@exec($GLOBALS['makeindex']." ".escapeshellarg($main_tex_file), $makeindex);
						if ( count($makeindex) ) {
							return new SoapFault('Server', "Makeindex found an error !");
						}
					}
					// BibTeX, Citations resolved
					if ( !is_file($main_tex_file.'.bbl') || filesize($main_tex_file.'.bbl') == 0 || check_for_bad_citation($main_tex_file) ) {
						@exec($GLOBALS['bibtex']." ".escapeshellarg($main_tex_file)." > bibtex.log 2>&1", $bibtex);
					}
					if ( is_file($main_tex_file.'.bib') && check_for_bibtex_errors($main_tex_file) ) {
						return new SoapFault('Server', "Bibtex reported an error !");
					}
					runTex($bin, $main_tex_file);
					if ( check_for_reference_change($main_tex_file) ) {
						runTex($bin, $main_tex_file);
					}
					if ( check_for_bad_reference($main_tex_file) ) {
						if ( is_file($main_tex_file.'.log') ) {
							copy($main_tex_file.'.log', $rootrep.'/LOG/'.$main_tex_file.'.log');
						}
						return new SoapFault('Server', "LaTeX could not resolve all references !");
					}
					if ( check_for_bad_citation($main_tex_file) ) {
						if ( is_file($main_tex_file.'.log') ) {
							copy($main_tex_file.'.log', $rootrep.'/LOG/'.$main_tex_file.'.log');
						}
						return new SoapFault('Server', "LaTeX could not resolve all citations or labels !");
					}
					if ( check_for_bad_natbib($main_tex_file) ) {
						if ( is_file($main_tex_file.'.log') ) {
							copy($main_tex_file.'.log', $rootrep.'/LOG/'.$main_tex_file.'.log');
						}
						return new SoapFault('Server', "Package natbib Error: Bibliography not compatible with author-year citations");
					}
					// Make ps and pdf from dvi if needed
					if ( is_file($main_tex_file.'.dvi') && is_executable(substr($GLOBALS['dvips'], 0, strpos($GLOBALS['dvips'], ' '))) ) {
						@exec($GLOBALS['dvips'].' "'.$main_tex_file.'.dvi" -o "'.$main_tex_file.'.ps" > ./dvips.log 2>&1');
						if ( is_file($main_tex_file.'.ps') && is_executable($GLOBALS['ps2pdf']) ) {
							@exec($GLOBALS['ps2pdf'].' "'.$main_tex_file.'.ps" "'.$main_tex_file.'.pdf"');
						} else {
							return new SoapFault('Server', "Could not find or make ps from dvi file !");
						}
					}
					// Saved compiled files
					if ( is_file($main_tex_file.'.pdf') ) {
						copy($main_tex_file.'.pdf', $rootrep.'/PDF/'.$main_tex_file.'.pdf');
					} else {
						return new SoapFault('Server', "Could not find or save pdf compiled file !");
					}
					if ( is_file($main_tex_file.'.ps') ) {
						copy($main_tex_file.'.ps', $rootrep.'/PS/'.$main_tex_file.'.ps');
					}
					if ( is_file($main_tex_file.'.log') ) {
						copy($main_tex_file.'.log', $rootrep.'/LOG/'.$main_tex_file.'.log');
					}
					unlinkTexTmp($main_tex_file);
				} else {
					return new SoapFault('Server', $bin." execution error !");
				}
			}
			if ( @mkdir($rootrep.'/arXiv') ) {
				@exec('/usr/bin/zip -q '.$rootrep.'/arXiv/ccsd.zip -r * -x \\*.bib > /dev/null 2>&1');
			}
			foreach ( array('LOG', 'PDF', 'PS', 'arXiv') as $dir ) {
				if ( dir_size($rootrep.'/'.$dir) == 0 ) {
					rm_dir($rootrep.'/'.$dir);
				}
			}
			exit;
		} else {
			return new SoapFault('Server', "directory '".$directory."' is empty !");
		}
	} else {
		return new SoapFault('Server', "unknown directory '".$directory."' !");
	}
}
